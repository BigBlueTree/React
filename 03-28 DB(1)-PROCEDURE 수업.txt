/*PL/SQL (PRODEDURAL LANGUAGE EXTENTION TO SQL) SQL 확장 절차 언어
    PROCEDURE : 리턴 값이 하나 이상인경우
    FUNCTION : 리턴값이 반드시 있는 경우(INPUT/OUTPUT)
    TRIGGER : 특정한 이벤트 발생 자동으로 실행
    
    PACKAGE : 프로시저,함수,변수 등을 묶어 놓은 것
    
    선언부
    DECLARE
        변수 상수 커서 값 선언 부분//선택
    실행부
    BEGIN
        절차적 언어 제어문,반복문,함수 로직이 기술//필수
    예외 처리부
    EXCEPTION
        예외사항 처리하는 부분//선택
    실행문 종료부
    END
        끝//필수
    ================================================================
    DBMS_OUTPUT.PUT_LINE(출력내용)
    
변수명 상수지정 데이터타입 리터럴,변수,표현식(함수,연산자)
IDENRIFIER [CONSTANT] DATATYPE [:= | DEFAULT EXPRESSION ]
PASSWORD CONSTANT VARCHAR2 : ='23412';
PASSWORD CONSTANT VARCHAR2 DEFAULT '1234';

반복문
FOR INDEX IN 시작값..끝값 LOOP
    실행문
    ...
END LOOP;

LOOP
    실행문
    EXIT [WHEN CONDITION]
END LOOP;
*/
CREATE OR REPLACE PROCEDURE PROCTEST1
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('HELLO WORLD');
END;

CREATE OR REPLACE PROCEDURE PROCTEST2(NUM IN NUMBER)
IS
    V_EMPNO CONSTANT NUMBER(4) := 7788;
    V_ENAME VARCHAR(10);
BEGIN
    V_ENAME := 'SCOTT';
   -- V_ENPNO := 1234;
    DBMS_OUTPUT.PUT_LINE('V_ENAME:'||V_ENAME);
    DBMS_OUTPUT.PUT_LINE('V_EMPNO:'||V_EMPNO);
END;


CREATE OR REPLACE PROCEDURE PROCTEST3
IS 
    DATA EMP%ROWTYPE;
    V_ENAME EMP.ENAME%TYPE;
    V_DEPTNO EMP.DEPTNO%TYPE;
BEGIN
    SELECT * INTO DATA
    FROM EMP
    WHERE EMPNO='7369';
    SELECT ENAME,DEPTNO INTO V_ENAME,V_DEPTNO
    FROM EMP
    WHERE EMPNO='7499';
    DBMS_OUTPUT.PUT_LINE(DATA.ENAME||','||DATA.DEPTNO);
    DBMS_OUTPUT.PUT_LINE(V_ENAME||','||V_DEPTNO);
END;

CREATE OR REPLACE PROCEDURE PROCTEST4 AS
BEGIN
    FOR I IN 1..4
    LOOP
        IF MOD(I,2)=0 
        THEN DBMS_OUTPUT.PUT_LINE('짝수');
    ELSE
        DMBS_OUTPUT.PUT_LINE('홀수');
    END IF;
END LOOP;
FOR LIST IN(SELECT EMPNO FROM EMP)
LOOP
    IF MOD(LIST.EMPNO,2)=0 THEN
        DBMS_OUTPUT.PUT_LINE('짝수');
    ELSE
        DMBS_OUTPUT.PUT_LINE('홀수');
    END IF;
END LOOP;
END;

CREATE OR REPLACE PROCEDURE PROCTEST5
IS
    V_NUM NUMBER :=1;
    V_SUM NUMBER :=0;
BEGIN
    LOOP
        DBMS_OUTPUT.PUT_LINE('NOW'||V_NUM);
        V_NUM:=V_NUM+1;
        V_SUM:=V_SUM+V_NUM;
        EXIT WHEN V_NUM>10;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('SUM'||V_SUM);
    V_SUM:=0;
    FOR I IN 1..10 LOOP
        CONTINUE WHEN MON(I=2)=0;
        V_SUM:=V_SUM+I;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('SUM'||V_SUM);
    V_NUM:=1;
    V_SUM:=0;
    WHILE V_NUM<11
    LOOP
        V_SUM:=V_SUM+V_NUM;
        V_NUM:=V_NUM+1;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('SUM'||V_SUM);
END PROCTEST5;

CREATE OR REPLACE PROCEDURE PROCTEST6
IS
    V_SCORE NUMBER:=81;
    V_GRADE CHAR(1):='C';
    V_REWARD VARCHAR2(20);
BEGIN
    DBMS_OUTPUT.PUT_LINE('SCORE:'||V_SCORE);
    IF V_SCORE >= 90 THEN V_GRADE:='A';
    ELSIF V_SCORE >= 80 THEN V_GRADE:='B';
    ELSIF V_SCORE >= 70 THEN V_GRADE:='C';
    ELSIF V_SCORE >= 60 THEN V_GRADE:='D';
    ELSE V_GRADE:='F';
    END IF;
    DBMS_OUTPUT.PUT_LINE('GRADE:'||V_GRADE);
    V_REWARD:=CASE V_GRADE
        WHEN 'A' THEN 'EXCELLENT'
        WHEN 'B' THEN 'VERY GOOD'
        WHEN 'C' THEN 'GOOD'
        ELSE 'NORMAL'
        END;
    DBMS_OUTPUT.PUT_LINE('GRADE:'||V_GRADE||' '||V_REWARD);
END PROCTEST6;

CREATE OR REPLACE PROCEDURE PROCTEST7 AS 
BEGIN
--구구단 출력
  FOR I IN 2..9 LOOP
    FOR J IN 1..9 LOOP
      DBMS_OUTPUT.PUT_LINE(I || ' X ' || J || ' = ' || I*J || ' ');
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(' ');
  END LOOP;
END PROCTEST7;

create or replace PROCEDURE PROC_AURG (
    V_NAMEIN IN VARCHAR2 
    , V_NAMEOUT OUT VARCHAR2 
    , P_EMPNO IN NUMBER 
    , P_DEPTNO IN NUMBER 
    , P_ENAME OUT VARCHAR2 
    , P_DNAME OUT VARCHAR2 
    , P_RES_CODE NUMBER 
) 
IS
    CURSOR CHECKEMP IS
    SELECT E.ENAME,D.DNAME FROM EMP E,DEPT D
    WHERE E.DEPTNO=D.DEPTNO 
    AND E.EMPNO=P_EMPNO AND D.DEPTNO=P_DEPTNO;
BEGIN
  DBMS_OUTPUT.PUT_LINE(V_NAMEIN||'님 안녕하세요.');
  V_NAMEOUT:=V_NAMEIN;
  DBMS_OUTPUT.PUT_LINE('사번:'||P_EMPNO);
  DBMS_OUTPUT.PUT_LINE('소속 부서:'||P_DEPTNO);
  OPEN CHECKEMP;
  FETCH CHECKEMP INTO P_ENAME,P_DNAME;
  --%FOUND 조회 결과가 1개 이상인 경우
  --%NOTFOUND 조회 결과가 0개인 경우
  --%ROWCOUNT 쿼리 수행 결과의 행수
  IF CHECKEMP%FOUND THEN P_RES_CODE=1000;
  ELSE P_RES_CODE
  END IF;
  CLOSE CHECKEMP;
END PROC_AURG;

